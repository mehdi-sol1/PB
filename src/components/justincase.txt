import React, { useState } from 'react';
import XLSX from 'xlsx/dist/xlsx.full.min.js';
import { saveAs } from 'file-saver';
const Drag = () => {
  const [excelData, setExcelData] = useState(null);

  const handleDrop = async (event) => {
    event.preventDefault();

    const files = event.dataTransfer.files;

    for (const file of files) {
      const extension = file.name.split('.').pop().toLowerCase();

      if (extension === 'xls' || extension === 'xlsx' || extension === 'csv') {
        const reader = new FileReader();
        reader.onload = (e) => {
          const data = new Uint8Array(e.target.result);
          const workbook = XLSX.read(data, { type: 'array' });
          const sheetName = workbook.SheetNames[0];
          const sheet = workbook.Sheets[sheetName];
          const result = XLSX.utils.sheet_to_json(sheet, { header: 1 });

          // Process the data and filter entries based on time criteria
          const cleanedData = cleanEntries(result);

          // Create a new CSV file with the cleaned data
          createCleanedCSV(cleanedData);

          setExcelData(cleanedData);
        };
        reader.readAsArrayBuffer(file);
      } else {
        console.log('Unsupported file format. Please drop an Excel file.');
      }
    }
  };

  // Function to filter entries based on time criteria
  const cleanEntries = (data) => {
    // Assuming the timestamp is in the first column, adjust as needed
    const timestampColumn = 0;

    // Filter entries based on time criteria (adjust time values as needed)
    const cleanedData = data.filter((entry) => {
      const timestamp = new Date(entry[timestampColumn]);

      const entryTime = timestamp.getHours() * 60 + timestamp.getMinutes();

      return (
        (entryTime >= 7 * 60 + 45 && entryTime <= 8 * 60 + 15) || // Morning entry
        (entryTime >= 15 * 60 + 50 && entryTime <= 16 * 60 + 15) // Afternoon exit
      );
    });
    console.log(cleanedData);
    return cleanedData;
    
  };

  

/// Function to create a new Excel file with the cleaned data
const createCleanedCSV = (cleanedData) => {
  // Create a worksheet
  const ws = XLSX.utils.aoa_to_sheet(cleanedData);

  // Create a new workbook and append the sheet
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, 'CleanedData');

  // Use the file-saver library to save the workbook as an Excel file
  XLSX.writeFile(wb, 'cleaned_data.xlsx');
};



  return (
    <div
      className="flex items-center justify-center h-screen bg-gray-200"
      onDragOver={(event) => event.preventDefault()}
      onDrop={handleDrop}
    >
      <div className="bg-white p-8 rounded-lg shadow-md">
        <h1 className="text-2xl font-semibold mb-4">Drag and Drop Excel Files</h1>
        <div className="border-dashed border-2 border-gray-400 p-6 text-center">
          {/* Display cleaned data or a message */}
          {excelData ? (
            <div>
              <h2 className="text-lg font-semibold mb-2">Cleaned Excel Data:</h2>
              <pre>{JSON.stringify(excelData, null, 2)}</pre>
            </div>
          ) : (
            <p>Drop your Excel file here.</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default Drag;
